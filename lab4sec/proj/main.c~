f/*site '\n'*/
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

#define nil 0x0

static char* TEXT_FILE_NAME;
static const int _FILE_STR_LEN = 140;
static const int _EXIT_SUCCESS = 0;
static const int _EXIT_FAIL = -1;
static const int _TWO = 2;
static const int _NULL = 0;
static const int _ONE = 1;

static struct pair
{
	char * word;
	int findNum;
};

static char ParseSymbal[] = { ' ', ',', '.', ';', ':', '?', '!', '\'',
	'"', '|', '/', '\\', '~', '_', '^', '`',
	'(', ')', '{', '}', '[', ']', '<', '\t',
	'>', '#', '%', '&', '-', '=', '+', '*', '\n', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'
};

/*static void writeText();*/
static char **readText();
int paircmp( const void *val1, const void *val2)
static int fileRows();
static void findAnswer();
static void inputError();
static struct pair* sort(char** mass, int size);
int main(/*@unused@*/int args, /*@unused@*/ char** argv)
{
/*	writeText();*/
	findAnswer();
	return _EXIT_SUCCESS;
}
int paircmp( const void *val1, const void *val2)
{
	struct pair * obj1 = (struct pair*)val1;
	struct pair * obj2 = (struct pair*)val2;
	return obj2->findNum - obj1->findNum; 
}
static void inputError()
{
	printf("\nError; press \"Enter\" to exit");
	exit(_EXIT_FAIL);
}
static void findAnswer()
{
	struct pair * mass ;
	int strLen;
	int i, j, k, q;
	char * answer ;
	int answerLenght = _NULL;
	char ** text;
	if((answer = (char*)malloc(sizeof(char) * _FILE_STR_LEN)) == nil)
		inputError();
	strcpy(answer,"");
	text = readText();
	
	for( i = _NULL; strcmp(text[i],"") != _NULL; i++)
	{
		strLen++;
	}
	
	for( i = _NULL; strcmp(text[i],"") != _NULL; i++)
	{
					for( j = _NULL; j < (int)strlen(text[i]); j++ )
										if(text[i][j] >= 'a' && text[i][j] <= 'z' ) 
															text[i][j] += 'A' - 'a';
	}
	static struct pair* sort(char** mass, int size)
{
	int i, j;
	struct pair * sheet = NULL;
	sheet = (struct pair*)malloc(sizeof(struct pair) * size);
	for( i = 0; i < size; i++ ){
		strcpy(sheet[i].word,mass[i]);
		sheet[i].findNum = 1;	
	}
	for( i = 0; i < size-1; i++ )
	{
		if( sheet[i].findNum == -1 )
			continue;
		for( j = i + 1; j < size; j++ )
		{
			if( strcmp( sheet[i].word, sheet[j].word ) == 0)
			{
				sheet[i].findNum++;
				sheet[j].findNum = -1;
			}
		}
	}
	qsort(sheet, size, sizeof(struct pair ), paircmp); 
	for( i = 0; i < size && sheet[i].findNum >= 1 && i < 20; i++ )
		printf("-%s-%d-\n", sheet[i].word, sheet[i].findNum);
	return sheet;
}
	
		
	}
	for( i = _NULL; i < fileRows() * _FILE_STR_LEN ; i++)
		free(text[i]);
	free(text);
	printf("\nThe longest unique character word: %s ; Answer lenght : %d\n", answer, answerLenght);
	free(answer);
	free( TEXT_FILE_NAME );
	return;
}
static int fileRows()
{
	int i = _NULL;
	char *temp = (char*)malloc( sizeof(char) * _FILE_STR_LEN * _TWO );
	FILE* file =fopen( TEXT_FILE_NAME, "r" );
	if( file == NULL || temp == nil )
		inputError();
	while( fgets( temp, _FILE_STR_LEN * _TWO, file ))
	{
		strcpy(temp, "");
		i++;
	}
	(void)fclose(file);
	return i;
}/*
static void writeText()
{
	char * temp = (char*)malloc(sizeof(char*) * _FILE_STR_LEN );
	FILE* file = fopen( TEXT_FILE_NAME ,"w");
	if( file == NULL || temp == nil )
		inputError();
	printf("Enter your text; when ready write \"-1\" end press enter\n\n");
	(void)fgets( temp, _FILE_STR_LEN , stdin );
	while( strcmp( temp, "-1\n") != _NULL )
	{
		fprintf( file, "%s", temp );
		fprintf(file, "%s", (temp[strlen(temp + _ONE)] == '\n') ? (""): ("\n"));
		strcpy( temp, "");
		(void)fgets( temp, _FILE_STR_LEN , stdin );
	}
	(void)fclose(file);
	free(temp);
	return;
}*/
char **readText()
{
	FILE *file;
	char *chStr = (char *)malloc(sizeof(char));
	char *tmp;
	char ch;
	char **str;
	int i = _NULL, q = _NULL, j = _NULL;
 	TEXT_FILE_NAME = (char*)malloc( sizeof(char) * _FILE_STR_LEN );
	printf("Enter text file name... ");
	scanf("%s", TEXT_FILE_NAME );
	file = fopen( TEXT_FILE_NAME, "r+");
	str= (char **)malloc(sizeof(char*) * fileRows() * _FILE_STR_LEN);
	tmp = (char *)malloc(sizeof(char) * _FILE_STR_LEN);
	if( file == NULL || chStr == nil || tmp == nil || str == nil || TEXT_FILE_NAME == nil)
		inputError();
	for (i = _NULL; i < fileRows() * _FILE_STR_LEN; i++)
		if( (str[i] = (char *)malloc(sizeof( char ) * _FILE_STR_LEN)) == nil)
			inputError();
	strcpy(tmp, "");
	ch = (char)fgetc(file);
	do{
		chStr[_NULL] = ch;
		for( j = _NULL; j < (int)strlen(ParseSymbal); j++){	
			if( chStr[_NULL] == ParseSymbal[j] ){
				if( (int)strlen(tmp) > _ONE ){
					strcpy( str[q++], tmp);
					strcpy(tmp, "");
					break;
				}
				strcpy(tmp, "");
				break;
			}else{
				if( j < (int)strlen(ParseSymbal) - _ONE )
					continue;
				else{
				 	strncat(tmp, chStr, (size_t)_ONE);
					break;
				}
			}
		}
	}while ( (int)(ch = (char)fgetc(file)) != EOF );
	free(tmp);
	(void)fclose(file);
	return str;
}
